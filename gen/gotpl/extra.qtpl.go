// This file is automatically generated by qtc from "extra.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line gen/gotpl/extra.qtpl:1
package gotpl

//line gen/gotpl/extra.qtpl:1
import (
	"github.com/chromedp/cdproto-gen/gen/genutil"
	"github.com/chromedp/cdproto-gen/pdl"
)

// ExtraTimestampTemplate is a special template for the Timestamp type that
// defines its JSON unmarshaling.

//line gen/gotpl/extra.qtpl:8
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line gen/gotpl/extra.qtpl:8
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line gen/gotpl/extra.qtpl:8
func StreamExtraTimestampTemplate(qw422016 *qt422016.Writer, t *pdl.Type, d *pdl.Domain) {
	//line gen/gotpl/extra.qtpl:9
	typ := t.Name
	monotonic := t.TimestampType == pdl.TimestampTypeMonotonic
	timeRes := "time.Millisecond"
	if t.TimestampType != pdl.TimestampTypeMillisecond {
		timeRes = "time.Second"
	}

	//line gen/gotpl/extra.qtpl:15
	qw422016.N().S(`
`)
	//line gen/gotpl/extra.qtpl:16
	if monotonic {
		//line gen/gotpl/extra.qtpl:16
		qw422016.N().S(`
// `)
		//line gen/gotpl/extra.qtpl:17
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:17
		qw422016.N().S(`Epoch is the `)
		//line gen/gotpl/extra.qtpl:17
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:17
		qw422016.N().S(` time epoch.
var `)
		//line gen/gotpl/extra.qtpl:18
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:18
		qw422016.N().S(`Epoch *time.Time

func init() {
	// initialize epoch
	bt := sysutil.BootTime()
	`)
		//line gen/gotpl/extra.qtpl:23
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:23
		qw422016.N().S(`Epoch = &bt
}
`)
		//line gen/gotpl/extra.qtpl:25
	}
	//line gen/gotpl/extra.qtpl:25
	qw422016.N().S(`

// MarshalEasyJSON satisfies easyjson.Marshaler.
func (t `)
	//line gen/gotpl/extra.qtpl:28
	qw422016.N().S(typ)
	//line gen/gotpl/extra.qtpl:28
	qw422016.N().S(`) MarshalEasyJSON(out *jwriter.Writer) {
	v := `)
	//line gen/gotpl/extra.qtpl:29
	if monotonic {
		//line gen/gotpl/extra.qtpl:29
		qw422016.N().S(`float64(time.Time(t).Sub(*`)
		//line gen/gotpl/extra.qtpl:29
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:29
		qw422016.N().S(`Epoch))/float64(time.Second)`)
		//line gen/gotpl/extra.qtpl:29
	} else {
		//line gen/gotpl/extra.qtpl:29
		qw422016.N().S(`float64(time.Time(t).UnixNano()/int64(`)
		//line gen/gotpl/extra.qtpl:29
		qw422016.N().S(timeRes)
		//line gen/gotpl/extra.qtpl:29
		qw422016.N().S(`))`)
		//line gen/gotpl/extra.qtpl:29
	}
	//line gen/gotpl/extra.qtpl:29
	qw422016.N().S(`

	out.Buffer.EnsureSpace(20)
	out.Buffer.Buf = strconv.AppendFloat(out.Buffer.Buf, v, 'f', -1, 64)
}

// MarshalJSON satisfies json.Marshaler.
func (t `)
	//line gen/gotpl/extra.qtpl:36
	qw422016.N().S(typ)
	//line gen/gotpl/extra.qtpl:36
	qw422016.N().S(`) MarshalJSON() ([]byte, error) {
	return easyjson.Marshal(t)
}

// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *`)
	//line gen/gotpl/extra.qtpl:41
	qw422016.N().S(typ)
	//line gen/gotpl/extra.qtpl:41
	qw422016.N().S(`) UnmarshalEasyJSON(in *jlexer.Lexer) {`)
	//line gen/gotpl/extra.qtpl:41
	if monotonic {
		//line gen/gotpl/extra.qtpl:41
		qw422016.N().S(`
	*t = `)
		//line gen/gotpl/extra.qtpl:42
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:42
		qw422016.N().S(`(`)
		//line gen/gotpl/extra.qtpl:42
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:42
		qw422016.N().S(`Epoch.Add(time.Duration(in.Float64()*float64(time.Second))))`)
		//line gen/gotpl/extra.qtpl:42
	} else {
		//line gen/gotpl/extra.qtpl:42
		qw422016.N().S(`
	*t = `)
		//line gen/gotpl/extra.qtpl:43
		qw422016.N().S(typ)
		//line gen/gotpl/extra.qtpl:43
		qw422016.N().S(`(time.Unix(0, int64(in.Float64()*float64(`)
		//line gen/gotpl/extra.qtpl:43
		qw422016.N().S(timeRes)
		//line gen/gotpl/extra.qtpl:43
		qw422016.N().S(`))))`)
		//line gen/gotpl/extra.qtpl:43
	}
	//line gen/gotpl/extra.qtpl:43
	qw422016.N().S(`
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *`)
	//line gen/gotpl/extra.qtpl:47
	qw422016.N().S(typ)
	//line gen/gotpl/extra.qtpl:47
	qw422016.N().S(`) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}
`)
//line gen/gotpl/extra.qtpl:50
}

//line gen/gotpl/extra.qtpl:50
func WriteExtraTimestampTemplate(qq422016 qtio422016.Writer, t *pdl.Type, d *pdl.Domain) {
	//line gen/gotpl/extra.qtpl:50
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line gen/gotpl/extra.qtpl:50
	StreamExtraTimestampTemplate(qw422016, t, d)
	//line gen/gotpl/extra.qtpl:50
	qt422016.ReleaseWriter(qw422016)
//line gen/gotpl/extra.qtpl:50
}

//line gen/gotpl/extra.qtpl:50
func ExtraTimestampTemplate(t *pdl.Type, d *pdl.Domain) string {
	//line gen/gotpl/extra.qtpl:50
	qb422016 := qt422016.AcquireByteBuffer()
	//line gen/gotpl/extra.qtpl:50
	WriteExtraTimestampTemplate(qb422016, t, d)
	//line gen/gotpl/extra.qtpl:50
	qs422016 := string(qb422016.B)
	//line gen/gotpl/extra.qtpl:50
	qt422016.ReleaseByteBuffer(qb422016)
	//line gen/gotpl/extra.qtpl:50
	return qs422016
//line gen/gotpl/extra.qtpl:50
}

// ExtraFrameTemplate is a special template for the Page.Frame type, adding FrameState.

//line gen/gotpl/extra.qtpl:53
func StreamExtraFrameTemplate(qw422016 *qt422016.Writer) {
	//line gen/gotpl/extra.qtpl:53
	qw422016.N().S(`
// FrameState is the state of a Frame.
type FrameState uint16

// FrameState enum values.
const (
    FrameDOMContentEventFired FrameState = 1 << (15 - iota)
    FrameLoadEventFired
    FrameAttached
    FrameNavigated
    FrameLoading
    FrameScheduledNavigation
)

// frameStateNames are the names of the frame states.
var frameStateNames = map[FrameState]string{
    FrameDOMContentEventFired: "DOMContentEventFired",
    FrameLoadEventFired:       "LoadEventFired",
    FrameAttached:             "Attached",
    FrameNavigated:            "Navigated",
	FrameLoading:			   "Loading",
    FrameScheduledNavigation:  "ScheduledNavigation",
}

// String satisfies stringer interface.
func (fs FrameState) String() string {
    var s []string
    for k, v := range frameStateNames {
        if fs&k != 0 {
            s = append(s, v)
        }
    }
    return "[" + strings.Join(s, " ") + "]"
}

// EmptyFrameID is the "non-existent" frame id.
const EmptyFrameID = FrameID("")
`)
//line gen/gotpl/extra.qtpl:90
}

//line gen/gotpl/extra.qtpl:90
func WriteExtraFrameTemplate(qq422016 qtio422016.Writer) {
	//line gen/gotpl/extra.qtpl:90
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line gen/gotpl/extra.qtpl:90
	StreamExtraFrameTemplate(qw422016)
	//line gen/gotpl/extra.qtpl:90
	qt422016.ReleaseWriter(qw422016)
//line gen/gotpl/extra.qtpl:90
}

//line gen/gotpl/extra.qtpl:90
func ExtraFrameTemplate() string {
	//line gen/gotpl/extra.qtpl:90
	qb422016 := qt422016.AcquireByteBuffer()
	//line gen/gotpl/extra.qtpl:90
	WriteExtraFrameTemplate(qb422016)
	//line gen/gotpl/extra.qtpl:90
	qs422016 := string(qb422016.B)
	//line gen/gotpl/extra.qtpl:90
	qt422016.ReleaseByteBuffer(qb422016)
	//line gen/gotpl/extra.qtpl:90
	return qs422016
//line gen/gotpl/extra.qtpl:90
}

// ExtraNodeTemplate is a special template for the DOM.Node type, adding NodeState.

//line gen/gotpl/extra.qtpl:93
func StreamExtraNodeTemplate(qw422016 *qt422016.Writer) {
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S(`
// AttributeValue returns the named attribute for the node.
func (n *Node) AttributeValue(name string) string {
	n.RLock()
	defer n.RUnlock()

	for i := 0; i < len(n.Attributes); i+=2 {
		if n.Attributes[i] == name  {
			return n.Attributes[i+1]
		}
	}

	return ""
}

// xpath builds the xpath string.
func (n *Node) xpath(stopAtDocument, stopAtID bool) string {
	n.RLock()
	defer n.RUnlock()

	p := ""
	pos := ""
	id := n.AttributeValue("id")
	switch {
	case n.Parent == nil:
		return n.LocalName

	case stopAtDocument && n.NodeType == NodeTypeDocument:
		return ""

	case stopAtID && id != "":
		p = "/"
		pos = `)
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S("`")
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S(`[@id='`)
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S("`")
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S(`+id+`)
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S("`")
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S(`']`)
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S("`")
	//line gen/gotpl/extra.qtpl:93
	qw422016.N().S(`

	case n.Parent != nil:
		var i int
		var found bool

		n.Parent.RLock()
		for j := 0; j < len(n.Parent.Children); j++ {
			if n.Parent.Children[j].LocalName == n.LocalName {
				i++
			}
			if n.Parent.Children[j].NodeID == n.NodeID {
				found = true
				break
			}
		}
		n.Parent.RUnlock()

		if found {
			pos = "["+strconv.Itoa(i)+"]"
		}

		p = n.Parent.xpath(stopAtDocument, stopAtID)
	}

	return  p + "/" + n.LocalName + pos
}

// PartialXPathByID returns the partial XPath for the node, stopping at the
// first parent with an id attribute or at nearest parent document node.
func (n *Node) PartialXPathByID() string {
	return n.xpath(true, true)
}

// PartialXPath returns the partial XPath for the node, stopping at the nearest
// parent document node.
func (n *Node) PartialXPath() string {
	return n.xpath(true, false)
}

// FullXPathByID returns the full XPath for the node, stopping at the top most
// document root or at the closest parent node with an id attribute.
func (n *Node) FullXPathByID() string {
	return n.xpath(false, true)
}

// FullXPath returns the full XPath for the node, stopping only at the top most
// document root.
func (n *Node) FullXPath() string {
	return n.xpath(false, false)
}

// NodeState is the state of a DOM node.
type NodeState uint8

// NodeState enum values.
const (
    NodeReady NodeState = 1 << (7 - iota)
	NodeVisible
	NodeHighlighted
)

// nodeStateNames are the names of the node states.
var nodeStateNames = map[NodeState]string{
    NodeReady:		 "Ready",
    NodeVisible:     "Visible",
    NodeHighlighted: "Highlighted",
}

// String satisfies stringer interface.
func (ns NodeState) String() string {
    var s []string
    for k, v := range nodeStateNames {
        if ns&k != 0 {
            s = append(s, v)
        }
    }
    return "[" + strings.Join(s, " ") + "]"
}

// EmptyNodeID is the "non-existent" node id.
const EmptyNodeID = NodeID(0)
`)
//line gen/gotpl/extra.qtpl:207
}

//line gen/gotpl/extra.qtpl:207
func WriteExtraNodeTemplate(qq422016 qtio422016.Writer) {
	//line gen/gotpl/extra.qtpl:207
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line gen/gotpl/extra.qtpl:207
	StreamExtraNodeTemplate(qw422016)
	//line gen/gotpl/extra.qtpl:207
	qt422016.ReleaseWriter(qw422016)
//line gen/gotpl/extra.qtpl:207
}

//line gen/gotpl/extra.qtpl:207
func ExtraNodeTemplate() string {
	//line gen/gotpl/extra.qtpl:207
	qb422016 := qt422016.AcquireByteBuffer()
	//line gen/gotpl/extra.qtpl:207
	WriteExtraNodeTemplate(qb422016)
	//line gen/gotpl/extra.qtpl:207
	qs422016 := string(qb422016.B)
	//line gen/gotpl/extra.qtpl:207
	qt422016.ReleaseByteBuffer(qb422016)
	//line gen/gotpl/extra.qtpl:207
	return qs422016
//line gen/gotpl/extra.qtpl:207
}

// ExtraFixStringUnmarshaler is a template that forces values to be parsed properly.

//line gen/gotpl/extra.qtpl:210
func StreamExtraFixStringUnmarshaler(qw422016 *qt422016.Writer, typ, parseFunc, extra string) {
	//line gen/gotpl/extra.qtpl:210
	qw422016.N().S(`
// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *`)
	//line gen/gotpl/extra.qtpl:212
	qw422016.N().S(typ)
	//line gen/gotpl/extra.qtpl:212
	qw422016.N().S(`) UnmarshalEasyJSON(in *jlexer.Lexer) {
	buf := in.Raw()
	if l := len(buf); l > 2 && buf[0] == '"' && buf[l-1] == '"' {
		buf = buf[1:l-1]
	}
`)
	//line gen/gotpl/extra.qtpl:217
	if parseFunc != "" {
		//line gen/gotpl/extra.qtpl:217
		qw422016.N().S(`
	v, err := strconv.`)
		//line gen/gotpl/extra.qtpl:218
		qw422016.N().S(parseFunc)
		//line gen/gotpl/extra.qtpl:218
		qw422016.N().S(`(string(buf)`)
		//line gen/gotpl/extra.qtpl:218
		qw422016.N().S(extra)
		//line gen/gotpl/extra.qtpl:218
		qw422016.N().S(`)
	if err != nil {
		in.AddError(err)
	}
`)
		//line gen/gotpl/extra.qtpl:222
	}
	//line gen/gotpl/extra.qtpl:222
	qw422016.N().S(`
	*t = `)
	//line gen/gotpl/extra.qtpl:223
	qw422016.N().S(typ)
	//line gen/gotpl/extra.qtpl:223
	qw422016.N().S(`(`)
	//line gen/gotpl/extra.qtpl:223
	if parseFunc != "" {
		//line gen/gotpl/extra.qtpl:223
		qw422016.N().S(`v`)
		//line gen/gotpl/extra.qtpl:223
	} else {
		//line gen/gotpl/extra.qtpl:223
		qw422016.N().S(`buf`)
		//line gen/gotpl/extra.qtpl:223
	}
	//line gen/gotpl/extra.qtpl:223
	qw422016.N().S(`)
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *`)
	//line gen/gotpl/extra.qtpl:227
	qw422016.N().S(typ)
	//line gen/gotpl/extra.qtpl:227
	qw422016.N().S(`) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}
`)
//line gen/gotpl/extra.qtpl:230
}

//line gen/gotpl/extra.qtpl:230
func WriteExtraFixStringUnmarshaler(qq422016 qtio422016.Writer, typ, parseFunc, extra string) {
	//line gen/gotpl/extra.qtpl:230
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line gen/gotpl/extra.qtpl:230
	StreamExtraFixStringUnmarshaler(qw422016, typ, parseFunc, extra)
	//line gen/gotpl/extra.qtpl:230
	qt422016.ReleaseWriter(qw422016)
//line gen/gotpl/extra.qtpl:230
}

//line gen/gotpl/extra.qtpl:230
func ExtraFixStringUnmarshaler(typ, parseFunc, extra string) string {
	//line gen/gotpl/extra.qtpl:230
	qb422016 := qt422016.AcquireByteBuffer()
	//line gen/gotpl/extra.qtpl:230
	WriteExtraFixStringUnmarshaler(qb422016, typ, parseFunc, extra)
	//line gen/gotpl/extra.qtpl:230
	qs422016 := string(qb422016.B)
	//line gen/gotpl/extra.qtpl:230
	qt422016.ReleaseByteBuffer(qb422016)
	//line gen/gotpl/extra.qtpl:230
	return qs422016
//line gen/gotpl/extra.qtpl:230
}

// ExtraExecutorTemplate is the additional shared executor interface for all
// the domains.

//line gen/gotpl/extra.qtpl:234
func StreamExtraExecutorTemplate(qw422016 *qt422016.Writer) {
	//line gen/gotpl/extra.qtpl:234
	qw422016.N().S(`
// Executor is the common interface for executing a command.
type Executor interface {
	// Execute executes the command.
	Execute(context.Context, string, json.Marshaler, json.Unmarshaler) error
}
`)
//line gen/gotpl/extra.qtpl:240
}

//line gen/gotpl/extra.qtpl:240
func WriteExtraExecutorTemplate(qq422016 qtio422016.Writer) {
	//line gen/gotpl/extra.qtpl:240
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line gen/gotpl/extra.qtpl:240
	StreamExtraExecutorTemplate(qw422016)
	//line gen/gotpl/extra.qtpl:240
	qt422016.ReleaseWriter(qw422016)
//line gen/gotpl/extra.qtpl:240
}

//line gen/gotpl/extra.qtpl:240
func ExtraExecutorTemplate() string {
	//line gen/gotpl/extra.qtpl:240
	qb422016 := qt422016.AcquireByteBuffer()
	//line gen/gotpl/extra.qtpl:240
	WriteExtraExecutorTemplate(qb422016)
	//line gen/gotpl/extra.qtpl:240
	qs422016 := string(qb422016.B)
	//line gen/gotpl/extra.qtpl:240
	qt422016.ReleaseByteBuffer(qb422016)
	//line gen/gotpl/extra.qtpl:240
	return qs422016
//line gen/gotpl/extra.qtpl:240
}

// ExtraMethodTypeTemplate generates the additional MethodType funcs and consts.

//line gen/gotpl/extra.qtpl:243
func StreamExtraMethodTypeTemplate(qw422016 *qt422016.Writer, domains []*pdl.Domain) {
	//line gen/gotpl/extra.qtpl:243
	qw422016.N().S(`
// Domain returns the Chrome DevTools Protocol domain of the event or command.
func (t MethodType) Domain() string {
	return string(t[:strings.IndexByte(string(t), '.')])
}

// MethodType values.
const (`)
	//line gen/gotpl/extra.qtpl:250
	for _, d := range domains {
		//line gen/gotpl/extra.qtpl:250
		for _, c := range d.Commands {
			//line gen/gotpl/extra.qtpl:250
			qw422016.N().S(`
	`)
			//line gen/gotpl/extra.qtpl:251
			qw422016.N().S(CommandMethodType(c, d))
			//line gen/gotpl/extra.qtpl:251
			qw422016.N().S(` = `)
			//line gen/gotpl/extra.qtpl:251
			qw422016.N().S(genutil.PackageName(d))
			//line gen/gotpl/extra.qtpl:251
			qw422016.N().S(`.`)
			//line gen/gotpl/extra.qtpl:251
			qw422016.N().S(CommandMethodType(c, nil))
			//line gen/gotpl/extra.qtpl:251
		}
		//line gen/gotpl/extra.qtpl:251
		for _, e := range d.Events {
			//line gen/gotpl/extra.qtpl:251
			qw422016.N().S(`
	`)
			//line gen/gotpl/extra.qtpl:252
			qw422016.N().S(EventMethodType(e, d))
			//line gen/gotpl/extra.qtpl:252
			qw422016.N().S(` = `)
			//line gen/gotpl/extra.qtpl:252
			qw422016.N().Q(ProtoName(e, d))
			//line gen/gotpl/extra.qtpl:252
		}
		//line gen/gotpl/extra.qtpl:252
	}
	//line gen/gotpl/extra.qtpl:252
	qw422016.N().S(`)
`)
//line gen/gotpl/extra.qtpl:253
}

//line gen/gotpl/extra.qtpl:253
func WriteExtraMethodTypeTemplate(qq422016 qtio422016.Writer, domains []*pdl.Domain) {
	//line gen/gotpl/extra.qtpl:253
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line gen/gotpl/extra.qtpl:253
	StreamExtraMethodTypeTemplate(qw422016, domains)
	//line gen/gotpl/extra.qtpl:253
	qt422016.ReleaseWriter(qw422016)
//line gen/gotpl/extra.qtpl:253
}

//line gen/gotpl/extra.qtpl:253
func ExtraMethodTypeTemplate(domains []*pdl.Domain) string {
	//line gen/gotpl/extra.qtpl:253
	qb422016 := qt422016.AcquireByteBuffer()
	//line gen/gotpl/extra.qtpl:253
	WriteExtraMethodTypeTemplate(qb422016, domains)
	//line gen/gotpl/extra.qtpl:253
	qs422016 := string(qb422016.B)
	//line gen/gotpl/extra.qtpl:253
	qt422016.ReleaseByteBuffer(qb422016)
	//line gen/gotpl/extra.qtpl:253
	return qs422016
//line gen/gotpl/extra.qtpl:253
}

// ExtraMessageTemplate generates the additional Message funcs.

//line gen/gotpl/extra.qtpl:256
func StreamExtraMessageTemplate(qw422016 *qt422016.Writer, domains []*pdl.Domain) {
	//line gen/gotpl/extra.qtpl:256
	qw422016.N().S(`
type empty struct{}
var emptyVal = &empty{}

// UnmarshalMessage unmarshals the message result or params.
func UnmarshalMessage(msg *Message) (interface{}, error) {
	var v easyjson.Unmarshaler
	switch msg.Method {`)
	//line gen/gotpl/extra.qtpl:263
	for _, d := range domains {
		//line gen/gotpl/extra.qtpl:263
		for _, c := range d.Commands {
			//line gen/gotpl/extra.qtpl:263
			qw422016.N().S(`
	case `)
			//line gen/gotpl/extra.qtpl:264
			qw422016.N().S(CommandMethodType(c, d))
			//line gen/gotpl/extra.qtpl:264
			qw422016.N().S(`:`)
			//line gen/gotpl/extra.qtpl:264
			if len(c.Returns) == 0 {
				//line gen/gotpl/extra.qtpl:264
				qw422016.N().S(`
		return emptyVal, nil`)
				//line gen/gotpl/extra.qtpl:265
			} else {
				//line gen/gotpl/extra.qtpl:265
				qw422016.N().S(`
		v = new(`)
				//line gen/gotpl/extra.qtpl:266
				qw422016.N().S(genutil.PackageName(d))
				//line gen/gotpl/extra.qtpl:266
				qw422016.N().S(`.`)
				//line gen/gotpl/extra.qtpl:266
				qw422016.N().S(CommandReturnsType(c))
				//line gen/gotpl/extra.qtpl:266
				qw422016.N().S(`)`)
				//line gen/gotpl/extra.qtpl:266
			}
			//line gen/gotpl/extra.qtpl:266
			qw422016.N().S(`
	`)
			//line gen/gotpl/extra.qtpl:267
		}
		//line gen/gotpl/extra.qtpl:267
		for _, e := range d.Events {
			//line gen/gotpl/extra.qtpl:267
			qw422016.N().S(`
	case `)
			//line gen/gotpl/extra.qtpl:268
			qw422016.N().S(EventMethodType(e, d))
			//line gen/gotpl/extra.qtpl:268
			qw422016.N().S(`:
		v = new(`)
			//line gen/gotpl/extra.qtpl:269
			qw422016.N().S(genutil.PackageName(d))
			//line gen/gotpl/extra.qtpl:269
			qw422016.N().S(`.`)
			//line gen/gotpl/extra.qtpl:269
			qw422016.N().S(EventType(e))
			//line gen/gotpl/extra.qtpl:269
			qw422016.N().S(`)
	`)
			//line gen/gotpl/extra.qtpl:270
		}
		//line gen/gotpl/extra.qtpl:270
	}
	//line gen/gotpl/extra.qtpl:270
	qw422016.N().S(`
	default:
		return nil, fmt.Errorf("unknown command or event %q", msg.Method)
	}

	var buf easyjson.RawMessage
	switch {
	case msg.Params != nil:
		buf = msg.Params

	case msg.Result != nil:
		buf = msg.Result

	default:
		return nil, errors.New("msg missing params or result")
	}

	err := easyjson.Unmarshal(buf, v)
	if err != nil {
		return nil, err
	}

	return v, nil
}
`)
//line gen/gotpl/extra.qtpl:294
}

//line gen/gotpl/extra.qtpl:294
func WriteExtraMessageTemplate(qq422016 qtio422016.Writer, domains []*pdl.Domain) {
	//line gen/gotpl/extra.qtpl:294
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line gen/gotpl/extra.qtpl:294
	StreamExtraMessageTemplate(qw422016, domains)
	//line gen/gotpl/extra.qtpl:294
	qt422016.ReleaseWriter(qw422016)
//line gen/gotpl/extra.qtpl:294
}

//line gen/gotpl/extra.qtpl:294
func ExtraMessageTemplate(domains []*pdl.Domain) string {
	//line gen/gotpl/extra.qtpl:294
	qb422016 := qt422016.AcquireByteBuffer()
	//line gen/gotpl/extra.qtpl:294
	WriteExtraMessageTemplate(qb422016, domains)
	//line gen/gotpl/extra.qtpl:294
	qs422016 := string(qb422016.B)
	//line gen/gotpl/extra.qtpl:294
	qt422016.ReleaseByteBuffer(qb422016)
	//line gen/gotpl/extra.qtpl:294
	return qs422016
//line gen/gotpl/extra.qtpl:294
}
