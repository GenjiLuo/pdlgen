// This file is automatically generated by qtc from "domain.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line templates/domain.qtpl:1
package templates

//line templates/domain.qtpl:1
import (
	"github.com/chromedp/chromedp-gen/types"
)

// DomainTemplate is the template for a single domain.

//line templates/domain.qtpl:6
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line templates/domain.qtpl:6
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/domain.qtpl:6
func StreamDomainTemplate(qw422016 *qt422016.Writer, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:6
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:7
	for _, c := range d.Commands {
		//line templates/domain.qtpl:7
		qw422016.N().S(`
`)
		//line templates/domain.qtpl:8
		qw422016.N().S(CommandTemplate(c, d, domains, sharedFunc))
		//line templates/domain.qtpl:8
		qw422016.N().S(`
`)
		//line templates/domain.qtpl:9
	}
	//line templates/domain.qtpl:9
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:10
	if len(d.Commands) > 0 {
		//line templates/domain.qtpl:10
		qw422016.N().S(`
// Command names.
const (
`)
		//line templates/domain.qtpl:13
		for _, c := range d.Commands {
			//line templates/domain.qtpl:13
			qw422016.N().S(`
	`)
			//line templates/domain.qtpl:14
			qw422016.N().S(c.CommandMethodType(nil))
			//line templates/domain.qtpl:14
			qw422016.N().S(` = `)
			//line templates/domain.qtpl:14
			qw422016.N().Q(c.ProtoName(d))
			//line templates/domain.qtpl:14
		}
		//line templates/domain.qtpl:14
		qw422016.N().S(`)
`)
		//line templates/domain.qtpl:15
	}
	//line templates/domain.qtpl:15
	qw422016.N().S(`
`)
//line templates/domain.qtpl:16
}

//line templates/domain.qtpl:16
func WriteDomainTemplate(qq422016 qtio422016.Writer, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:16
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/domain.qtpl:16
	StreamDomainTemplate(qw422016, d, domains, sharedFunc)
	//line templates/domain.qtpl:16
	qt422016.ReleaseWriter(qw422016)
//line templates/domain.qtpl:16
}

//line templates/domain.qtpl:16
func DomainTemplate(d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) string {
	//line templates/domain.qtpl:16
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/domain.qtpl:16
	WriteDomainTemplate(qb422016, d, domains, sharedFunc)
	//line templates/domain.qtpl:16
	qs422016 := string(qb422016.B)
	//line templates/domain.qtpl:16
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/domain.qtpl:16
	return qs422016
//line templates/domain.qtpl:16
}

// CommandTemplate is the general command template.

//line templates/domain.qtpl:19
func StreamCommandTemplate(qw422016 *qt422016.Writer, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:19
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:20
	/* add *Param type */

	//line templates/domain.qtpl:20
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:21
	qw422016.N().S(TypeTemplate(c, types.CommandTypePrefix, types.CommandTypeSuffix, d, domains, sharedFunc, nil, false, true))
	//line templates/domain.qtpl:21
	qw422016.N().S(`

`)
	//line templates/domain.qtpl:23
	/* add Command func */

	//line templates/domain.qtpl:23
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:24
	qw422016.N().S(CommandFuncTemplate(c, d, domains, sharedFunc))
	//line templates/domain.qtpl:24
	qw422016.N().S(`

`)
	//line templates/domain.qtpl:26
	/* add param funcs (only if it has parameters and a returns). */

	//line templates/domain.qtpl:26
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:27
	if len(c.Parameters) != 0 {
		//line templates/domain.qtpl:27
		for _, p := range c.Parameters {
			//line templates/domain.qtpl:27
			if !p.Optional {
				//line templates/domain.qtpl:27
				continue
				//line templates/domain.qtpl:27
			}
			//line templates/domain.qtpl:27
			qw422016.N().S(`
`)
			//line templates/domain.qtpl:28
			qw422016.N().S(CommandOptionFuncTemplate(p, c, d, domains, sharedFunc))
			//line templates/domain.qtpl:28
			qw422016.N().S(`
`)
			//line templates/domain.qtpl:29
		}
		//line templates/domain.qtpl:29
	}
	//line templates/domain.qtpl:29
	qw422016.N().S(`

`)
	//line templates/domain.qtpl:31
	/* add *Returns type */

	//line templates/domain.qtpl:31
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:32
	if len(c.Returns) != 0 {
		//line templates/domain.qtpl:32
		qw422016.N().S(`
`)
		//line templates/domain.qtpl:33
		qw422016.N().S(TypeTemplate(&types.Type{
			ID:          c.Name,
			Type:        types.TypeObject,
			Description: "Return values.",
			Properties:  c.Returns,
		}, types.CommandReturnsPrefix, types.CommandReturnsSuffix, d, domains, sharedFunc, nil, false, false))
		//line templates/domain.qtpl:38
		qw422016.N().S(`
`)
		//line templates/domain.qtpl:39
	}
	//line templates/domain.qtpl:39
	qw422016.N().S(`

`)
	//line templates/domain.qtpl:41
	/* add CommandParams.Do func */

	//line templates/domain.qtpl:41
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:42
	qw422016.N().S(CommandDoFuncTemplate(c, d, domains, sharedFunc))
	//line templates/domain.qtpl:42
	qw422016.N().S(`
`)
//line templates/domain.qtpl:43
}

//line templates/domain.qtpl:43
func WriteCommandTemplate(qq422016 qtio422016.Writer, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:43
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/domain.qtpl:43
	StreamCommandTemplate(qw422016, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:43
	qt422016.ReleaseWriter(qw422016)
//line templates/domain.qtpl:43
}

//line templates/domain.qtpl:43
func CommandTemplate(c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) string {
	//line templates/domain.qtpl:43
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/domain.qtpl:43
	WriteCommandTemplate(qb422016, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:43
	qs422016 := string(qb422016.B)
	//line templates/domain.qtpl:43
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/domain.qtpl:43
	return qs422016
//line templates/domain.qtpl:43
}

// CommandFuncTemplate is the command func template.

//line templates/domain.qtpl:46
func StreamCommandFuncTemplate(qw422016 *qt422016.Writer, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:47
	cmdName := c.CamelName()
	typ := c.CommandType()

	//line templates/domain.qtpl:49
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:50
	qw422016.N().S(formatComment(c.GetDescription(), "", cmdName+" "))
	//line templates/domain.qtpl:50
	if len(c.Parameters) > 0 {
		//line templates/domain.qtpl:50
		qw422016.N().S(`
//
// parameters:`)
		//line templates/domain.qtpl:52
		for _, p := range c.Parameters {
			//line templates/domain.qtpl:52
			if p.Optional {
				//line templates/domain.qtpl:52
				continue
				//line templates/domain.qtpl:52
			}
			//line templates/domain.qtpl:52
			qw422016.N().S(`
//   `)
			//line templates/domain.qtpl:53
			qw422016.N().S(p.String())
			//line templates/domain.qtpl:53
			if p.Optional {
				//line templates/domain.qtpl:53
				qw422016.N().S(` (optional)`)
				//line templates/domain.qtpl:53
			}
			//line templates/domain.qtpl:53
		}
		//line templates/domain.qtpl:53
	}
	//line templates/domain.qtpl:53
	qw422016.N().S(`
func `)
	//line templates/domain.qtpl:54
	qw422016.N().S(cmdName)
	//line templates/domain.qtpl:54
	qw422016.N().S(`(`)
	//line templates/domain.qtpl:54
	qw422016.N().S(c.ParamList(d, domains, sharedFunc, false))
	//line templates/domain.qtpl:54
	qw422016.N().S(`) *`)
	//line templates/domain.qtpl:54
	qw422016.N().S(typ)
	//line templates/domain.qtpl:54
	qw422016.N().S(`{
	return &`)
	//line templates/domain.qtpl:55
	qw422016.N().S(typ)
	//line templates/domain.qtpl:55
	qw422016.N().S(`{`)
	//line templates/domain.qtpl:55
	for _, t := range c.Parameters {
		//line templates/domain.qtpl:55
		if !t.Optional {
			//line templates/domain.qtpl:55
			qw422016.N().S(`
		`)
			//line templates/domain.qtpl:56
			qw422016.N().S(t.GoName(false))
			//line templates/domain.qtpl:56
			qw422016.N().S(`: `)
			//line templates/domain.qtpl:56
			qw422016.N().S(t.GoName(true))
			//line templates/domain.qtpl:56
			qw422016.N().S(`,`)
			//line templates/domain.qtpl:56
		}
		//line templates/domain.qtpl:56
	}
	//line templates/domain.qtpl:56
	qw422016.N().S(`
	}
}
`)
//line templates/domain.qtpl:59
}

//line templates/domain.qtpl:59
func WriteCommandFuncTemplate(qq422016 qtio422016.Writer, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:59
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/domain.qtpl:59
	StreamCommandFuncTemplate(qw422016, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:59
	qt422016.ReleaseWriter(qw422016)
//line templates/domain.qtpl:59
}

//line templates/domain.qtpl:59
func CommandFuncTemplate(c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) string {
	//line templates/domain.qtpl:59
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/domain.qtpl:59
	WriteCommandFuncTemplate(qb422016, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:59
	qs422016 := string(qb422016.B)
	//line templates/domain.qtpl:59
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/domain.qtpl:59
	return qs422016
//line templates/domain.qtpl:59
}

// CommandOptionFuncTemplate is the command option func template.

//line templates/domain.qtpl:62
func StreamCommandOptionFuncTemplate(qw422016 *qt422016.Writer, t *types.Type, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:63
	n := t.GoName(false)
	optName := types.OptionFuncPrefix + n + types.OptionFuncSuffix
	typ := c.CommandType()
	v := t.GoName(true)

	//line templates/domain.qtpl:67
	qw422016.N().S(`
`)
	//line templates/domain.qtpl:68
	qw422016.N().S(formatComment(t.GetDescription(), "", optName+" "))
	//line templates/domain.qtpl:68
	qw422016.N().S(`
func (p `)
	//line templates/domain.qtpl:69
	qw422016.N().S(typ)
	//line templates/domain.qtpl:69
	qw422016.N().S(`) `)
	//line templates/domain.qtpl:69
	qw422016.N().S(optName)
	//line templates/domain.qtpl:69
	qw422016.N().S(`(`)
	//line templates/domain.qtpl:69
	qw422016.N().S(v)
	//line templates/domain.qtpl:69
	qw422016.N().S(` `)
	//line templates/domain.qtpl:69
	qw422016.N().S(t.GoType(d, domains, sharedFunc))
	//line templates/domain.qtpl:69
	qw422016.N().S(`) *`)
	//line templates/domain.qtpl:69
	qw422016.N().S(typ)
	//line templates/domain.qtpl:69
	qw422016.N().S(`{
	p.`)
	//line templates/domain.qtpl:70
	qw422016.N().S(n)
	//line templates/domain.qtpl:70
	qw422016.N().S(` = `)
	//line templates/domain.qtpl:70
	qw422016.N().S(v)
	//line templates/domain.qtpl:70
	qw422016.N().S(`
	return &p
}
`)
//line templates/domain.qtpl:73
}

//line templates/domain.qtpl:73
func WriteCommandOptionFuncTemplate(qq422016 qtio422016.Writer, t *types.Type, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:73
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/domain.qtpl:73
	StreamCommandOptionFuncTemplate(qw422016, t, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:73
	qt422016.ReleaseWriter(qw422016)
//line templates/domain.qtpl:73
}

//line templates/domain.qtpl:73
func CommandOptionFuncTemplate(t *types.Type, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) string {
	//line templates/domain.qtpl:73
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/domain.qtpl:73
	WriteCommandOptionFuncTemplate(qb422016, t, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:73
	qs422016 := string(qb422016.B)
	//line templates/domain.qtpl:73
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/domain.qtpl:73
	return qs422016
//line templates/domain.qtpl:73
}

// CommandDoFuncTemplate is the command do func template.

//line templates/domain.qtpl:76
func StreamCommandDoFuncTemplate(qw422016 *qt422016.Writer, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:77
	typ := c.CommandType()

	hasEmptyParams := len(c.Parameters) == 0
	hasEmptyRet := len(c.Returns) == 0

	emptyRet := c.EmptyRetList(d, domains, sharedFunc)
	if emptyRet != "" {
		emptyRet += ", "
	}

	retTypeList := c.RetTypeList(d, domains, sharedFunc)
	if retTypeList != "" {
		retTypeList += ", "
	}

	retValueList := c.RetNameList("res", d, domains)
	if retValueList != "" {
		retValueList += ", "
	}

	b64ret := c.Base64EncodedRetParam()

	// determine if there's a conditional that indicates whether or not the
	// returned value is b64 encoded.
	var b64cond bool
	for _, p := range c.Returns {
		if p.Name == types.Base64EncodedParamName {
			b64cond = true
			break
		}
	}

	pval := "p"
	if hasEmptyParams {
		pval = "nil"
	}

	//line templates/domain.qtpl:113
	qw422016.N().S(`
// Do executes `)
	//line templates/domain.qtpl:114
	qw422016.N().S(c.ProtoName(d))
	//line templates/domain.qtpl:114
	qw422016.N().S(` against the provided context.`)
	//line templates/domain.qtpl:114
	if !hasEmptyRet {
		//line templates/domain.qtpl:114
		qw422016.N().S(`
//
// returns:`)
		//line templates/domain.qtpl:116
		for _, p := range c.Returns {
			//line templates/domain.qtpl:116
			if p.Name == types.Base64EncodedParamName {
				//line templates/domain.qtpl:116
				continue
				//line templates/domain.qtpl:116
			}
			//line templates/domain.qtpl:116
			qw422016.N().S(`
//   `)
			//line templates/domain.qtpl:117
			qw422016.N().S(p.String())
			//line templates/domain.qtpl:117
		}
		//line templates/domain.qtpl:117
	}
	//line templates/domain.qtpl:117
	qw422016.N().S(`
func (p *`)
	//line templates/domain.qtpl:118
	qw422016.N().S(typ)
	//line templates/domain.qtpl:118
	qw422016.N().S(`) Do(ctxt context.Context, h cdp.Executor) (`)
	//line templates/domain.qtpl:118
	qw422016.N().S(retTypeList)
	//line templates/domain.qtpl:118
	qw422016.N().S(`err error) {`)
	//line templates/domain.qtpl:118
	if hasEmptyRet {
		//line templates/domain.qtpl:118
		qw422016.N().S(`
	return h.Execute(ctxt, `)
		//line templates/domain.qtpl:119
		qw422016.N().S(c.CommandMethodType(nil))
		//line templates/domain.qtpl:119
		qw422016.N().S(`, `)
		//line templates/domain.qtpl:119
		qw422016.N().S(pval)
		//line templates/domain.qtpl:119
		qw422016.N().S(`, nil)`)
		//line templates/domain.qtpl:119
	} else {
		//line templates/domain.qtpl:119
		qw422016.N().S(`
	// execute
	var res `)
		//line templates/domain.qtpl:121
		qw422016.N().S(c.CommandReturnsType())
		//line templates/domain.qtpl:121
		qw422016.N().S(`
	err = h.Execute(ctxt, `)
		//line templates/domain.qtpl:122
		qw422016.N().S(c.CommandMethodType(nil))
		//line templates/domain.qtpl:122
		qw422016.N().S(`, `)
		//line templates/domain.qtpl:122
		qw422016.N().S(pval)
		//line templates/domain.qtpl:122
		qw422016.N().S(`, &res)
	if err != nil {
		return `)
		//line templates/domain.qtpl:124
		qw422016.N().S(emptyRet)
		//line templates/domain.qtpl:124
		qw422016.N().S(`err
	}
	`)
		//line templates/domain.qtpl:126
		if b64ret != nil {
			//line templates/domain.qtpl:126
			qw422016.N().S(`
	// decode
	var dec []byte`)
			//line templates/domain.qtpl:128
			if b64cond {
				//line templates/domain.qtpl:128
				qw422016.N().S(`
	if res.Base64encoded {`)
				//line templates/domain.qtpl:129
			}
			//line templates/domain.qtpl:129
			qw422016.N().S(`
		dec, err = base64.StdEncoding.DecodeString(res.`)
			//line templates/domain.qtpl:130
			qw422016.N().S(b64ret.GoName(false))
			//line templates/domain.qtpl:130
			qw422016.N().S(`)
		if err != nil {
			return `)
			//line templates/domain.qtpl:132
			qw422016.N().S(emptyRet)
			//line templates/domain.qtpl:132
			qw422016.N().S(`err
		}`)
			//line templates/domain.qtpl:133
			if b64cond {
				//line templates/domain.qtpl:133
				qw422016.N().S(`
	} else {
		dec = []byte(res.`)
				//line templates/domain.qtpl:135
				qw422016.N().S(b64ret.GoName(false))
				//line templates/domain.qtpl:135
				qw422016.N().S(`)
	}`)
				//line templates/domain.qtpl:136
			}
			//line templates/domain.qtpl:136
		}
		//line templates/domain.qtpl:136
		qw422016.N().S(`
	return `)
		//line templates/domain.qtpl:137
		qw422016.N().S(retValueList)
		//line templates/domain.qtpl:137
		qw422016.N().S(`nil`)
		//line templates/domain.qtpl:137
	}
	//line templates/domain.qtpl:137
	qw422016.N().S(`
}
`)
//line templates/domain.qtpl:139
}

//line templates/domain.qtpl:139
func WriteCommandDoFuncTemplate(qq422016 qtio422016.Writer, c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) {
	//line templates/domain.qtpl:139
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/domain.qtpl:139
	StreamCommandDoFuncTemplate(qw422016, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:139
	qt422016.ReleaseWriter(qw422016)
//line templates/domain.qtpl:139
}

//line templates/domain.qtpl:139
func CommandDoFuncTemplate(c *types.Type, d *types.Domain, domains []*types.Domain, sharedFunc func(string, string) bool) string {
	//line templates/domain.qtpl:139
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/domain.qtpl:139
	WriteCommandDoFuncTemplate(qb422016, c, d, domains, sharedFunc)
	//line templates/domain.qtpl:139
	qs422016 := string(qb422016.B)
	//line templates/domain.qtpl:139
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/domain.qtpl:139
	return qs422016
//line templates/domain.qtpl:139
}
